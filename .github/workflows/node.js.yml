name: Node.js CI/CD pipeline with Docker, ECR, SonarCloud, OWASP, and K8s

on:
  push:
    branches: ["main"]

env:
  DOCKER_IMAGE: my-nodejs-app
  DOCKER_REGISTRY: docker.io
  ECR_REPOSITORY: my-nodejsapp
  ECR_REPO: 714748322187.dkr.ecr.us-east-1.amazonaws.com/nodejs-app
  KUBECONFIG_PATH: ${{ secrets.KUBECONFIG }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]
        env: [dev, test, produc]

    steps:
      # 1Ô∏è‚É£ Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Set up Node.js
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      # 3Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: npm install
        working-directory: ./nodejs-app

      # 4Ô∏è‚É£ Run tests
      - name: Run tests
        run: npm test
        working-directory: ./nodejs-app

      # 5Ô∏è‚É£ Upload test artifacts (v4)
      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            nodejs-app/test-results/
            nodejs-app/coverage/

      # 6Ô∏è‚É£ OWASP Dependency-Check via Docker
      - name: OWASP Dependency-Check
        run: |
          docker run --rm -v ${PWD}/nodejs-app:/src owasp/dependency-check \
            --scan /src \
            --format "ALL" \
            --failOnCVSS 7

      # 7Ô∏è‚É£ SonarCloud Scan
      - name: SonarCloud Scan
        run: |
          npm install -g sonar-scanner
          sonar-scanner \
            -Dsonar.projectKey=rukevweubio_Gitaction-pipeline-nodejs-ecr-kubernates-deployment \
            -Dsonar.organization=rukevweubio-1 \
            -Dsonar.sources=./nodejs-app \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      # 8Ô∏è‚É£ Docker Hub login
      - name: Log in to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      # 9Ô∏è‚É£ Build Docker image
      - name: Build Docker image
        run: docker build -t ${{ env.DOCKER_IMAGE }} ./nodejs-app

      # üîü Trivy scan
      - name: Trivy scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:latest
          format: 'table'
          exit-code: '1'

      # 1Ô∏è‚É£1Ô∏è‚É£ Tag & Push to Docker Hub
      - name: Tag & Push Docker image to Docker Hub
        run: |
          docker tag ${{ env.DOCKER_IMAGE }}:latest ${{ secrets.DOCKERHUB_USERNAME }}/my-nodejsapp:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-nodejsapp:latest

      # 1Ô∏è‚É£2Ô∏è‚É£ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # 1Ô∏è‚É£3Ô∏è‚É£ Login to AWS ECR
      - name: Login to AWS ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ env.ECR_REPO }}

      # 1Ô∏è‚É£4Ô∏è‚É£ Tag & Push Docker image to ECR
      - name: Tag & Push Docker image to ECR
        run: |
          docker tag ${{ env.DOCKER_IMAGE }}:latest ${{ env.ECR_REPO }}:latest
          docker push ${{ env.ECR_REPO }}:latest

      # 1Ô∏è‚É£5Ô∏è‚É£ Configure kubeconfig
      - name: Configure kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG }}" > $KUBECONFIG_PATH
          export KUBECONFIG=$KUBECONFIG_PATH
          kubectl config view

      # 1Ô∏è‚É£6Ô∏è‚É£ Set namespace
      - name: Set namespace
        run: |
          if [ "${{ matrix.env }}" == "dev" ]; then
            NAMESPACE="runner-dev"
          elif [ "${{ matrix.env }}" == "test" ]; then
            NAMESPACE="runner-test"
          else
            NAMESPACE="runner-produc"
          fi
          echo "NAMESPACE=$NAMESPACE" >> $GITHUB_ENV

      # 1Ô∏è‚É£7Ô∏è‚É£ Deploy to Kubernetes
      - name: Deploy to Kubernetes
        run: |
          sed -i "s|image: .*|image: ${{ secrets.DOCKERHUB_USERNAME }}/my-nodejsapp:latest|g" k8s/deployment.yaml
          kubectl apply -f k8s/deployment.yaml -n $NAMESPACE
          kubectl rollout status deployment/myapp -n $NAMESPACE
